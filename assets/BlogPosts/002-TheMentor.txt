Ominous title, yes? Reminds you of these words:

"I am a hacker, this is my manifesto. You may stop this imdividual, but you can't stop us all. After all, we're all alike."

Well, this isn't about that The Mentor. Different mentor, my mentor. I met Felix Tsikira at a company I worked for a year ago. Being the textbook introvert I was planning on a quiet day with this new partner but that wasn't going to happen. On the way to our assignment for the day he talked about himself and his extensive knowledge of flora and fauna. He was so articulate and laid out the information like a seasoned lecturer (I later learned he was a trained teacher). Felix didn't hesitate in sharing his knowledge. I absorbed more information on that half-hour walk than I would have reading about it. Which leads to the first lesson he taught me without knowing:

"Lesson 1 - True masters of their crafts share their knowledge."

This is especially true for software developers. Perhaps the best example of this is the advent of open source software. These are master programmers, this is you and I, sharing knowledge and bettering the world. Some would argue that the open source movement isn't worth a dime. To those people I say hello have you met Linux, or Blender, or the all the open source tools that work better than their "closed source" equivalents? I mean, we should all go on Github every once in a while!


When Tsikira and I finally arrived at our post he questioned why I had taken this line of work. Money was my answer. Then he proceeded to lay out detailed business plans, complete with projections, all off the top of his head. I mean, in my head I'm thinking "This nigga mental" but he made a lot of sense. Seven. That is how many ideas he gave me, each of which were low capital and high return. The ingenuity of his ideas was beyond astounding. The second lesson I learned:

"Lesson 2 - Forego convention and find creative solutions to problems."

I believe that almost all programmers have these code snippets (I know I do) that they have stashed away to be used to serve some generic functions in other projects. This generates run off the mill solutions to problems which I think is boring. Don't get me wrong. I'm not saying there is anything wrong with writing reusable code but at least trying to code an entirely new solution sometimes would combat the drudgery, no? There are times when I have rewritten the same sub-routine in different ways over a dozen times and each time it was significantly smaller and faster. Instead of sticking to the old adage that says if it works don't touch it, rather get into it and find creative ways to make it better.


Felix is a herbalist when he's not at work (even at work but don't tell anyone). You name a health problem and he has the solution. I'm of the thinking that if he went big he'd put pharmaceutical companies out of business. I've seen him in action, confidently pescribing an assortment of herbs for whatever the named ailment. I asked him if he isn't afraid of his treatments not working and he said no. He told me that it was all about confidence in one's ability. If you've studied something and have mastered it then why should you fear failing the execution of said craft?

"Lesson 3 - Confidence, confidence, confidence"

A lot of times in my programming business I have been faced with tasks that seemed insurmountable, either because I didn't have the neccessary computing power or I didn't have the technical know-how. Before I met my mentor I would turn down such jobs. After he told me to be more confident in my abilities I began accepting the scary tasks. I realized that there is really no limit to what you can achieve through sheer confidence. I learned that if you do not have the computing power you can always find someone who does. If it's a knowledge problem then hit the University of YouTube, go on online forums, read a book, and if you still don't get it then cut in a professional (or me..wink) in on the deal. Have the confidence that you'll get it done and you'll have no choice but to get it done.

There are a great many things I have learned during the course our friendship and if I were to share them all here then the 5 minute read at the top of this post would be a lie. Everything my mentor has taught me has been key in creating the programmer I am now. I'm sure that if you take these lessons and apply them in your own life then you'll be better for it ;-).